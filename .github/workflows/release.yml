name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Pre-release Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: make deps

    - name: Run all checks
      run: make check

    - name: Test all MCP protocol versions
      run: |
        go test -v ./server/test/draft/...
        go test -v ./server/test/v20241105/...
        go test -v ./server/test/v20250326/...

    - name: Generate coverage report
      run: make coverage

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate documentation archive
      run: |
        mkdir -p dist/docs
        
        # Copy important documentation
        cp README.md dist/docs/
        cp LICENSE dist/docs/
        cp CONTRIBUTING.md dist/docs/
        
        # Copy examples as documentation
        if [ -d "examples" ]; then
          cp -r examples dist/docs/
        fi
        
        # Copy documentation
        if [ -d "docs" ]; then
          cp -r docs/* dist/docs/
        fi
        
        # Copy specification files
        if [ -d "specification" ]; then
          cp -r specification dist/docs/
        fi
        
        # Create documentation archive
        tar -czf dist/gomcp-${{ steps.version.outputs.VERSION }}-docs.tar.gz -C dist/docs .

    - name: Create source archive
      run: |
        # Create source code archive
        git archive --format=tar.gz --prefix=gomcp-${{ steps.version.outputs.VERSION }}/ HEAD > dist/gomcp-${{ steps.version.outputs.VERSION }}-source.tar.gz
        git archive --format=zip --prefix=gomcp-${{ steps.version.outputs.VERSION }}/ HEAD > dist/gomcp-${{ steps.version.outputs.VERSION }}-source.zip

    - name: Generate checksums
      run: |
        cd dist
        sha256sum *.tar.gz *.zip > checksums.txt

    - name: Generate release notes
      id: release_notes
      run: |
        # Generate release notes
        echo "## GoMCP ${{ steps.version.outputs.VERSION }}" > release_notes.md
        echo "" >> release_notes.md
        
        # Add API stability note for v1.5.0+
        if [[ "${{ steps.version.outputs.VERSION }}" == v1.5.* ]] || [[ "${{ steps.version.outputs.VERSION }}" > v1.5.0 ]]; then
          echo "ðŸ”’ **API Stability**: This release includes locked, stable APIs ready for production use." >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        echo "### Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo 'go get github.com/localrivet/gomcp@${{ steps.version.outputs.VERSION }}' >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since $LAST_TAG" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release_notes.md
          echo "" >> release_notes.md
        else
          echo "### Features" >> release_notes.md
          echo "" >> release_notes.md
          echo "- Complete MCP protocol implementation (2024-11-05, 2025-03-26, draft)" >> release_notes.md
          echo "- Client and server libraries with type-safe APIs" >> release_notes.md
          echo "- Multiple transport options (stdio, HTTP, WebSocket, SSE)" >> release_notes.md
          echo "- Automatic protocol version negotiation" >> release_notes.md
          echo "- Comprehensive event system" >> release_notes.md
          echo "- Server process management" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        echo "### Documentation" >> release_notes.md
        echo "" >> release_notes.md
        echo "- ðŸ“– [API Documentation](https://pkg.go.dev/github.com/localrivet/gomcp@${{ steps.version.outputs.VERSION }})" >> release_notes.md
        echo "- ðŸ’¡ [Examples](https://github.com/localrivet/gomcp/tree/${{ steps.version.outputs.VERSION }}/examples)" >> release_notes.md
        echo "- ðŸ“‹ [MCP Specifications](https://github.com/localrivet/gomcp/tree/${{ steps.version.outputs.VERSION }}/specification)" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Usage" >> release_notes.md
        echo "" >> release_notes.md
        echo "This is a Go SDK/library for building MCP-enabled applications. Import it into your Go projects:" >> release_notes.md
        echo "" >> release_notes.md
        echo '```go' >> release_notes.md
        echo 'import "github.com/localrivet/gomcp/client"' >> release_notes.md
        echo 'import "github.com/localrivet/gomcp/server"' >> release_notes.md
        echo '```' >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.tar.gz
          dist/*.zip
          dist/checksums.txt
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        make_latest: ${{ !contains(steps.version.outputs.VERSION, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: always()
    
    steps:
    - name: Release notification
      run: |
        echo "GoMCP ${GITHUB_REF#refs/tags/} SDK has been released!"
        echo "Release status: ${{ needs.release.result }}"
        echo "Go modules: Available at github.com/localrivet/gomcp@${GITHUB_REF#refs/tags/}" 